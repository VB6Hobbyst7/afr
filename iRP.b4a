Build1=Default,nl.pdeg.irp
Build2=PGR,nl.pdeg.irp,RELEASE,UI
File1=022-power-button.svg
File10=dlgStationInfo.bal
File11=editStation.bal
File12=genreList.bal
File13=getSetStation.bal
File14=globe.png
File15=image4512.png
File16=letters_.bal
File17=logo_afr.png
File18=lstCountry.bal
File19=lstLanguage.bal
File2=027-information.svg
File20=lstStat1.bal
File21=lyric.html
File22=main.bal
File23=main_askPhonePermission.bal
File24=main_import_data.bal
File25=Montserrat-Regular.ttf
File26=no_internet.bal
File27=no_logo.png
File28=no_wifi.png
File29=NoImageAvailable.png
File3=4.jpg
File30=no-internet.png
File31=nothing_found.png
File32=outline_alarm_off_black_18dp.png
File33=outline_alarm_on_black_18dp.png
File34=outline_volume_off_black_24.png
File35=outline_volume_up_black_24.png
File36=pegi3.png
File37=play32.png
File38=player.bal
File39=player_playing_format.bal
File4=addNewStations.bal
File40=playerStation.bal
File41=radio.png
File42=radio_flat.png
File43=radio_notif.png
File44=rdodb.db
File45=searchStation.bal
File46=searchStationGenre.bal
File47=sleeptimer.svg
File48=slidingMenu.bal
File49=song_playing.html
File5=baseline_language_white_24dp.png
File50=start_search.png
File51=stop.png
File52=stored_songs.bal
File53=stores_song_detail.bal
File54=tsSearchStation.bal
File55=welcome.bal
File56=wifi.png
File6=baseline-language-24px.svg
File7=clvLanguage.bal
File8=dlgSongInfo.bal
File9=dlgSongLyric.bal
FileGroup1=svg
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=images
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=svg
FileGroup20=Default Group
FileGroup21=other
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup24=Default Group
FileGroup25=Default Group
FileGroup26=Default Group
FileGroup27=Default Group
FileGroup28=images
FileGroup29=images
FileGroup3=images
FileGroup30=Default Group
FileGroup31=Default Group
FileGroup32=Default Group
FileGroup33=Default Group
FileGroup34=Default Group
FileGroup35=Default Group
FileGroup36=Default Group
FileGroup37=images
FileGroup38=Default Group
FileGroup39=Default Group
FileGroup4=Default Group
FileGroup40=Default Group
FileGroup41=Default Group
FileGroup42=Default Group
FileGroup43=images
FileGroup44=other
FileGroup45=Default Group
FileGroup46=Default Group
FileGroup47=Default Group
FileGroup48=Default Group
FileGroup49=Default Group
FileGroup5=Default Group
FileGroup50=Default Group
FileGroup51=images
FileGroup52=Default Group
FileGroup53=Default Group
FileGroup54=Default Group
FileGroup55=Default Group
FileGroup56=images
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library10=randomaccessfile
Library11=reflection
Library12=net
Library13=runtimepermissions
Library14=json
Library15=encryption
Library16=okhttputils2
Library17=xmllayoutbuilder
Library18=network
Library19=ioxsvg
Library2=appcompat
Library20=xui views
Library21=dialogs
Library22=tabstripviewpager
Library23=exoplayer
Library24=bctextengine
Library3=xui
Library4=sql
Library5=stringutils
Library6=phone
Library7=mlwifi
Library8=javaobject
Library9=designsupport
ManifestCode=AddManifestText(~\n~~\n~<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="28"/>~\n~<uses-permission~\n~  android:name="android.permission.READ_PHONE_STATE"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true"~\n~	android:name=".App" ~\n~    android:anyDensity="true"/>~\n~	 	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />~\n~	<uses-permission android:name="android.permission.WAKE_LOCK" />~\n~	<uses-permission android:name="android.permission.INTERNET" />~\n~	<uses-permission android:name="android.permission.FOREGROUND_SERVICE" />~\n~	)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~'SetApplicationAttribute(android:icon, "@drawable/radio")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~~\n~SetApplicationAttribute(android:resizeableActivity, "true")~\n~'AddApplicationText(<meta-data android:name="android.max_aspect" android:value="10"/>)~\n~~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="@style/Theme.AppCompat.Light.DarkActionBar">'.light.NoActionBar">~\n~        <item name="colorPrimary">#004ba0</item>~\n~        <item name="colorPrimaryDark">#004ba0</item>~\n~        <item name="colorAccent">#0098FF</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">true</item>~\n~		<item name="android:windowDrawsSystemBarBackgrounds">true</item>~\n~    	<item name="android:statusBarColor">#004ba0</item>~\n~		<item name="android:navigationBarColor">#004ba0</item>~\n~		<item name="android:colorControlActivated">#1a237e</item>~\n~        <item name="android:colorControlNormal">#007CF5</item>~\n~	</style>~\n~~\n~</resources>~\n~)~\n~~\n~'<item name="android:windowDrawsSystemBarBackgrounds">true</item>~\n~ '   	<item name="android:statusBarColor">#0098FF</item>~\n~'		<item name="android:navigationBarColor">#004ba0</item>~\n~AddApplicationText(~\n~  <provider~\n~  android:name="android.support.v4.content.FileProvider"~\n~  android:authorities="$PACKAGE$.provider"~\n~  android:exported="false"~\n~  android:grantUriPermissions="true">~\n~  <meta-data~\n~  android:name="android.support.FILE_PROVIDER_PATHS"~\n~  android:resource="@xml/provider_paths"/>~\n~  </provider>~\n~)~\n~CreateResource(xml, provider_paths,~\n~   <external-files-path name="files" path="" />~\n~)~\n~CreateResourceFromFile(Macro, Core.NetworkClearText)~\n~~\n~AddPermission(android.permission.INTERNET)~\n~AddPermission(android.permission.VIBRATE)~\n~AddPermission(android.permission.FOREGROUND_SERVICE)~\n~AddPermission(android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS)~\n~
Module1=addNewStations
Module10=clsScrollLabel
Module11=clsSongData
Module12=clsTimer
Module13=cmGen
Module14=editStation
Module15=genDb
Module16=getSetStation
Module17=irp_CustomListView
Module18=KeyValueStore
Module19=modGlobal
Module2=clsChartlyrics
Module20=NB6
Module21=phdetect
Module22=player
Module23=scrobbler
Module24=searchStation
Module25=Starter
Module26=stored_songs
Module3=clsDeviceVolume
Module4=clsFunctions
Module5=clsGeneral
Module6=clsGenTimer
Module7=clsGenVolumeControl
Module8=clsHttp
Module9=clsRandomImage
NumberOfFiles=56
NumberOfLibraries=24
NumberOfModules=26
Version=9.801
@EndOfDesignText@
'#IgnoreWarnings: 9, 1, 10,16
#Region  Activity Attributes 
	#FullScreen: True
	#IncludeTitle: False
#End Region

#Region  Project Attributes
	#ApplicationLabel: AdFree Radio
	#VersionCode: 30052049
	#VersionName: 1.00
	 'SupportedOrientations possible values: unspecified, landscape or portrait
	#SupportedOrientations: portrait 

'	#LibraryName: OkHttpUtils2
'	#AdditionalJar: Java-Json
'   #AdditionalJar: sqlite-jdbc-3.21.0

	#MultiDex: False
'	#additionaljar: com.android.support:support-v4
#End Region

#Region Diff
#AdditionalRes: ..\resource
#Extends: android.support.v7.app.AppCompatActivity
'#ExcludeClasses: .games, .drive, .fitness, .wearable, .measurement, .cast, .auth, .nearby
'#ExcludeClasses: .tagmanager, .analytics, .wallet, .plus, .vision, .gcm, .maps, .ads
#BridgeLogger: True
#End Region

Sub Process_Globals
	Dim ftp As FTP
End Sub

Sub Globals
	Private dbTimestamp As Long
	Dim clsGen As clsGeneral
'	Private NativeMe As JavaObject
	
	Private toolbar As ACToolBarDark
	Private rp As RuntimePermissions
	Public lblDbConnected As Label
	Private pnlMain As Panel
	'Private kvs As KeyValueStore

	Private btnContinue As Button
	Private ImageView1 As ImageView
	Private ImageView2 As ImageView
	Private btn_ok As Button
	Private pnl_noInternet As Panel
	Private acExitButton As ACColoredButton
	Private clsGen As clsGeneral
	Private lbl_welcome_msg As Label
'	Private ph As PhoneWakeState
	Private stCount As Int
	Private stImportPerc As Float
	Private lbl_data As Label
	Private lbl_db As Label
	Private lbl_stname As Label
	Private redPerc As Float 
	Private greenPerc As Float
	Private redCurrValue As Float = 0
	Private greenCurrValue As Float = 0
	Private dlCount As Int = 1
	Private pnl_import_data As Panel
	Private pnl_permission As Panel
	Private ivPegi As ImageView
	Private ivSpotify As ImageView
	
	
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("main")
	'IgnoreBatteryOptimizations
	clsGen.Initialize
	getSetrdoDatabase
	'kvs.Initialize(Starter.irp_dbFolder, "settings", True)
	initKvs
	Dim appExitStatus As Int = Starter.kvs.GetSimple("app_normal_exit")

	If appExitStatus = 1 Then
		Starter.kvs.PutSimple("app_started", 0)
	Else
		Starter.kvs.PutSimple("app_started", 1)
	End If
	Starter.kvs.PutSimple("app_normal_exit", 0)
	
	Wait For (clsGen.CheckConnected) Complete(result As Boolean)
	If result = False Then
		toolbar.SubTitle = "Internet connection required"
		pnlMain.LoadLayout("no_internet")
		Return
	End If

	If rp.Check(rp.PERMISSION_READ_PHONE_STATE) Then
		startIRP
		Return
	End If

	Starter.activeActivity = "Main"
	DateTime.DateFormat =  DateTime.DeviceDefaultDateFormat
	
	If FirstTime Then

	End If

	If rp.Check(rp.PERMISSION_READ_PHONE_STATE) = False Then
		pnlMain.LoadLayout("main_askPhonePermission")
		Return
	Else
		startIRP
	End If


End Sub

Sub iterateLabel(count As String)
	lblDbConnected.Text = $"Importing stations ${NumberFormat2(count, 1, 0, 0, False)} %"$
	lbl_data.TextSize = 100-count
	lbl_db.TextSize = count
	redCurrValue = redCurrValue + redPerc
	greenCurrValue = greenCurrValue + greenPerc
		
	lbl_db.TextColor = Colors.ARGB(255, redCurrValue,greenCurrValue,0)
End Sub




Sub FTP_DownloadProgress (ServerPath As String, TotalDownloaded As Long, Total As Long)
	dlCount = dlCount +1
	If dlCount Mod 30 = 0 Then
		Dim s As String
		s = "Downloaded " & Round(TotalDownloaded / 1000) & "KB"
		If Total > 0 Then s = s & " out of " & Round(Total / 1000) & "KB"
		lblDbConnected.Text = "Downloading station list " & Round(TotalDownloaded / 1000) & "KB"
		Sleep(0)
	End If
End Sub


Sub startIRP
	Dim appStarted, dataUsageShown As Int = 0
	
	If Starter.kvs.ContainsKey("app_started") = True Then
		appStarted = Starter.kvs.GetSimple("app_started")
	End If
	If Starter.kvs.ContainsKey("data_usage_warning_shown") = True Then
		dataUsageShown = Starter.kvs.GetSimple("data_usage_warning_shown")
	End If
	
	If dataUsageShown = 0 Then
		showUserDataUsageWarning
	End If
	
	
	Dim rdoCount As Int  = genDb.countRecords("rdolist")
	wait for (checkUpdate) Complete(r As Boolean)
	
	
	If dbTimestamp > Starter.kvs.getSimple("stationsTimestamp") And rdoCount > 0 Then
		Msgbox2Async($"Radio station update availeble, update now?"$, Starter.vAppname, "Yes", "", "No", Null, False)
	
		Wait For Msgbox_Result (response As Int)
	
		If response = DialogResponse.POSITIVE Then
			genDb.truncateTable("rdolist")
			'Sleep(2*1000)
			rdoCount = genDb.countRecords("rdolist")
		End If
	End If
	
	If rdoCount = 0 Then
		If genDb.tableExists("stored_songs") = False Then
			genDb.genStoredSongTable
		End If
		If genDb.tableExists("stUpdate") = False Then
			genDb.genUpdateTable
		End If
		
		Starter.kvs.PutSimple("stationsTimestamp", dbTimestamp)
		If pnl_permission.IsInitialized Then
			pnl_permission.Visible = False
		End If

		wait for (importData("rdolist_main.csv", "rdolist")) Complete (result As Boolean)

		pnlMain.LoadLayout("welcome")
	End If
	If appStarted = 0 Then
'		wait for (showWelcome) Complete (result As Boolean)
		showWelcome
		Sleep(2000)
	End If
	
	If pnlMain.IsInitialized Then
		pnlMain.Visible = False
	End If

'	If genDb.tableExists("stored_songs") = False Then
'		genDb.genStoredSongTable
'	End If
'	If genDb.tableExists("stUpdate") = False Then
'		genDb.genUpdateTable
'	End If
	
	startPlayer
End Sub

Sub showUserDataUsageWarning
	Dim result As Int = Msgbox2($"This application connects to the internet, to avoid usage charges, use Wi-Fi only"$, Starter.vAppname, "OK, I understand", "", "Get me out of here", Null)
	
	If result = DialogResponse.POSITIVE Then
		Starter.kvs.PutSimple("data_usage_warning_shown", 1)
		IgnoreBatteryOptimizations
	Else
		Starter.kvs.PutSimple("data_usage_warning_shown", 0)
		StopService(Starter)
	
		CallSub(Starter, "Service_Destroy")
		Activity.Finish
	End If
End Sub

Sub checkUpdate As ResumableSub
	If ftp.IsInitialized = False Then
		ftp.Initialize("FTP", "ftp.pdeg.nl", 21, Starter.doy, Starter.moy)
	End If
	ftp.List("/")
	wait for FTP_ListCompleted(ServerPath As String, Success As Boolean, Folders() As FTPEntry, Files() As FTPEntry)
	If Success = False Then
		Log(LastException)
		ftp.Close
	Else
		For i = 0 To Files.Length - 1
			dbTimestamp = Files(i).Timestamp
		Next
		ftp.Close
	End If
	Return True
End Sub


Sub importData(fileName As String, table As String)As ResumableSub
	
	pnlMain.LoadLayout("main_import_data")
	'Sleep(1)
	lblDbConnected.Visible = True
	lblDbConnected.Text = ""
	ftp.PassiveMode = True
	ftp.Initialize("FTP", "ftp.pdeg.nl", 21, Starter.doy, Starter.moy)
	Dim sf As Object = ftp.DownloadFile(fileName, False, Starter.irp_dbFolder, "rdolist_main.csv")
	Wait For (sf) ftp_DownloadCompleted (ServerPath As String, Success As Boolean)
	ftp.Close

	wait for(importStations(table)) Complete (result As Boolean)
	pnl_import_data.Visible = False
	
	Return True
End Sub


Sub Activity_Resume
	
End Sub


Sub Activity_Pause (UserClosed As Boolean)


End Sub


Sub startPlayer
	Dim cur As Cursor = genDb.getPresetStations
	
	If  genDb.getCountryBookmark = "" And cur.RowCount < 1 Then
		StartActivity(getSetStation)
	Else
		StartActivity(player)
	End If
	Activity.Finish
End Sub


Sub getSetrdoDatabase
	If File.Exists(Starter.irp_dbFolder, "station_logo") = False Then
		File.MakeDir(Starter.irp_dbFolder, "station_logo")
	End If


	If File.Exists(Starter.irp_dbFolder, "rdodb.db") = False Then
		File.Copy(File.DirAssets, "rdodb.db", Starter.irp_dbFolder, "rdodb.db")
	End If
End Sub


Sub Activity_PermissionResult (Permission As String, Result As Boolean)
	If Permission = rp.PERMISSION_READ_PHONE_STATE Then
		'pnlMain.Visible = False
		startIRP
	End If
End Sub


Sub btnContinue_Click
	rp.CheckAndRequest(rp.PERMISSION_READ_PHONE_STATE)
	pnl_permission.Visible = False
End Sub


Sub showWelcome
	pnlMain.LoadLayout("welcome")
	
End Sub


Sub btn_ok_Click
	ExitApplication
End Sub


Sub acExitButton_Click
	ExitApplication

End Sub


Sub initKvs
'	If File.Exists(Starter.irp_dbFolder, "settings") = False Then
'		Starter.kvs.Initialize(Starter.irp_dbFolder, "settings", True)
'	Else
'		Starter.kvs.Initialize(Starter.irp_dbFolder, "settings", False)
'	End If

	If Starter.kvs.ContainsKey("data_usage_warning_shown") = False Then
		Starter.kvs.PutSimple("data_usage_warning_shown", 0)
	End If

	If Starter.kvs.ContainsKey("stationsTimestamp") = False Then
		Starter.kvs.PutSimple("stationsTimestamp", 0)
	End If
	
	If Starter.kvs.ContainsKey("capnowplaying") = False Then
		Starter.kvs.PutSimple("capnowplaying", 0)
	End If
	
	If Starter.kvs.ContainsKey("wifionly") = False Then
		Starter.kvs.PutSimple("wifionly", False)
		Starter.vWifiOnly	= False
	End If

	If Starter.kvs.ContainsKey("updatelogo") = False Then
		Starter.kvs.PutSimple("updatelogo", False)
		Starter.vUpdateLogo	= False
	End If

	If Starter.kvs.ContainsKey("data_usage") = False Then
		Starter.kvs.PutSimple("data_usage", 0)
	End If
	
	If Starter.kvs.ContainsKey("app_normal_exit") = False Then
		Starter.kvs.PutSimple("app_normal_exit", 0)
	End If

	If Starter.kvs.ContainsKey("pnl_stop_button") = False Then
		Starter.kvs.PutSimple("pnl_stop_button", False)
	End If

	If Starter.kvs.ContainsKey("pnl_lyric_button") = False Then
		Starter.kvs.PutSimple("pnl_lyric_button", False)
	End If

	If Starter.kvs.ContainsKey("pnl_store_song_button") = False Then
		Starter.kvs.PutSimple("pnl_store_song_button", False)
	End If

	If Starter.kvs.ContainsKey("pnl_album_info_button") = False Then
		Starter.kvs.PutSimple("pnl_album_info_button", False)
	End If

	If Starter.kvs.ContainsKey("app_started") = False Then
	'	kvs.PutSimple("app_started", 0)
	End If

	If Starter.kvs.ContainsKey("lblNowPlayingDataRate") = False Then
		Starter.kvs.PutSimple("lblNowPlayingDataRate", "")
	End If

	If Starter.kvs.ContainsKey("lbl_time_now") = False Then
		Starter.kvs.PutSimple("lbl_time_now", "")
	End If

'	If kvs.ContainsKey("player_station_logo") = False Then
'		kvs.PutBitmap("player_station_logo", Null)
'	End If
'
'	If kvs.ContainsKey("store_song_albumart") = False Then
'		kvs.PutBitmap("store_song_albumart", Null)
'	End If
	
	If Starter.kvs.ContainsKey("sleep_timer") = False Then
		Starter.kvs.PutSimple("sleep_timer", 0)
	End If
	
	If Starter.kvs.ContainsKey("sleep_timer_duration") = False Then
		Starter.kvs.PutSimple("sleep_timer_duration", 3600000) ' one hour
	End If
	
End Sub

Sub ivPegi_Click
	Dim intent1 As Intent
	intent1.Initialize(intent1.ACTION_VIEW, "https://pegi.info/")
	StartActivity(intent1)
End Sub


Public Sub importStations(table As String) As ResumableSub
	Dim su As StringUtils
	Dim csv As List
	Dim items() As String
	Dim modValue As Int = 300
	Dim sql As String
	Dim vSql As SQL
	Dim vDbName As String = "rdodb.db"
	
	Dim db_path As String = CallSub(Starter, "getDbPath")
	Try
		If vSql.IsInitialized = False Then
			vSql.Initialize(db_path, vDbName, False)
		End If
	Catch
		Log(LastException)
	End Try
	
	sql = $"insert
	into
		${table} (stname,
		description,
		genre,
		country,
		language,
		stream1,
		stream2,
		stream3,
		stream4,
		stream5,
		stream6)
	VALUES (?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?)"$
	
	
	If File.Exists(Starter.irp_dbFolder, "rdolist_main.csv") = False Then
		ToastMessageShow("Unable to download station list"	, True)
		Return False
	End If
	genDb.truncateTable(table)
	
	csv = su.LoadCSV(Starter.irp_dbFolder, "rdolist_main.csv", "|")
	stCount = csv.Size-1
	redPerc = (23/stCount)*modValue
	greenPerc = (192/stCount)*modValue
	
	vSql.BeginTransaction
	For i = 2 To csv.Size - 1
		If i Mod modValue = 0 Then
			stImportPerc = i/stCount * 100
			iterateLabel(stImportPerc)
			Sleep(0)
		End If
		
		items = csv.Get(i)
		vSql.ExecNonQuery2(sql, Array As String(items(1), items(2), items(3), items(4), items(5),items(6), items(7), items(8), items(9), items(10), items(11)))
	Next
	vSql.TransactionSuccessful
	vSql.EndTransaction
	
	iterateLabel(100)
	lbl_stname.Text = $"Done.. Imported ${stCount} stations"$
	
	File.Delete(Starter.irp_dbFolder, "rdolist_main.csv")
	Return False
End Sub

Sub IgnoreBatteryOptimizations
	Dim GetAndroidApiLevel As Phone
'	Log($"BRAND : ${GetAndroidApiLevel.Manufacturer}, MODEL : ${GetAndroidApiLevel.Model}"$)
	If GetAndroidApiLevel.SdkVersion>=23 Then
		Dim JavaObject1 As JavaObject
		JavaObject1.InitializeContext
		Dim Ignoring As Boolean=JavaObject1.RunMethod("isIgnoringBatteryOptimizations", Null)
		If Ignoring=False Then
			MsgboxAsync("Please confirm the following form to exclude the app from battery optimization.", "Battery optimization")
			'RuntimePermissions1.CheckAndRequest("android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS")
			Dim JavaObject1 As JavaObject
			JavaObject1.InitializeContext
			JavaObject1.RunMethod("ShowPermissionDialog", Null)
		End If
	End If

End Sub





#If JAVA
import android.content.Context;
import android.content.Intent;
import android.os.PowerManager;
import android.provider.Settings;
import android.net.Uri;
import anywheresoftware.b4a.BA;

public boolean isIgnoringBatteryOptimizations(){
Context context=this;
String packageName = context.getPackageName();
PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
return pm.isIgnoringBatteryOptimizations(packageName);
}

public void ShowPermissionDialog(){
    Intent intent = new Intent();
    Context context=this;
    String packageName = context.getPackageName();
    PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
    if (pm.isIgnoringBatteryOptimizations(packageName)){
        BA.LogInfo("isIgnoringBatteryOptimizations TRUE");
        intent.setAction(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS);
    } else {
        BA.LogInfo("isIgnoringBatteryOptimizations FALSE");
        intent.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
        intent.setData(Uri.parse("package:" + packageName));
    }
    context.startActivity(intent);
}
#End If